==============================================================================

АННОТАЦИЯ
Целью данного дипломного проекта была разработка Web-приложения для совершения (онлайн покупок) заказа товаров, которая автоматизирует работу магазина одежды. 
В результате проделанной работы были разработаны базы данных на основе документо ориентированной системы (NoSQL) управления базами данных Firebase, сервер на основе Node.js + Axios, веб-приложение на основе React.js + Redux.
Итогом данного дипломного проекта является интернет сервис (для покупки) и заказа одежды.
==============================================================================

ВВЕДЕНИЕ
В данной работе рассматривается создание интернет сервиса для заказа товаров (покупки товаров).
И для достижения данной цели были поставлены такие задачи:
– Выбрать наилучшее решение для реализации проекта.
– Реализовать основной функционал веб-сайта: заказ, авторизация, история заказов, сохранность заказов в корзине авторизованного клиента.
– Построить максимально удобный и легкий в использовании интерфейс.
– Научится реализовывать  UX, UI, IA, IxD и понимать их взаимодействие.*
------------------------------------------------------------------------------
*UX, UI, IA, IxD. – аббревиатуры цифрового дизайна.
==============================================================================

ТЕРМИНЫ И СОКРАЩЕНИЯ
*UX, UI, IA, IxD. – аббревиатуры цифрового дизайна.
UX дизайн (User Experience Design - дизайн опыта пользователя) — то, как пользователь относится к приложениям.
UI дизайн (User Interface Design - дизайн пользовательского интерфейса) — это то, из каких элементов состоит приложение, а также каким образом и где они расположены. 
IA (Information Architecture - информационная архитектура) — это то, как организовано приложение.
IxD (Interaction Design - проектирование взаимодействия) — это то, как взаимодействуют приложение и пользователь.
------------------------------------------------------------------------------
HTML - (HyperText Markup Language) - язык гипертекстовой разметки.
CSS - (Cascading Style Sheet)s - каскадные таблицы стилей.
JS - (JavaScript) - язык программирования является реализацией спецификации ECMAScript.
JSON - (JavaScript Object Notation) - текстовый формат обмена данными, основанный на JavaScript.
NoSQL - (Not only Structured Query Language) - не только язык структурированных запросов.
HTTP(S) - (HyperText Transfer Protocol (Secure -  повышения безопасности)) - «протокол передачи гипертекста» - протокол прикладного уровня передачи данных, изначально - в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных.
API - (Application Programming Interface) - «программный интерфейс приложения» - описание способов взаимодействия одной компьютерной программы с другими.
DOM (Document Object Model) — это структура HTML-страницы. Работа с DOM — это поиск, добавление, изменение, перемещение и удаление HTML-тегов.
AJAX (Asynchronous Javascript And XML) — это общее название для технологий, которые позволяют делать асинхронные (без перезагрузки страницы) запросы к серверу и обмениваться данными. Так как клиентская и серверная части веб-приложения написаны на разных языках программирования, то для обмена информацией необходимо преобразовывать структуры данных (например, списки и словари), в которых она хранится, в JSON-формат.
==============================================================================

ФУНКЦИОНАЛЬНЫЕ ВОЗМОЖНОСТИ
Система должна иметь следующие функциональные возможности:
– просмотр информации о товаре, его описания и иллюстрации;
– добавление и удаление интересующегося товара в корзину покупок;
– просмотр клиентом списка товаров в корзине, его общей цены;
– возможность выбора категории интересующего товара;
– оформление заказа (на покупку товара);
– история заказов товаров;
– возможность сохранности товаров в корзине после выхода из авторизации. 
– список всех товаров для клиента;
==============================================================================

ТЕХНОЛОГИИ ДЛЯ РАЗРАБОТКИ ПРОЕКТНОЙ ЧАСТИ
Для разработки проектной части были использованы следующие технологии:
1) React - (иногда называемый ReactJS), библиотека JavaScript, разработанная Facebook для создания интерактивных / реактивных пользовательских интерфейсов. Как и Angular, React разбивает внешнее приложение на компоненты. Каждый компонент может содержать свое собственное состояние, и родительский элемент может передавать свое состояние своим дочерним компонентам, и эти компоненты могут передавать изменения родительскому элементу с помощью функций обратного вызова. Компоненты React обычно реализуются с использованием JSX - расширения JavaScript, которое позволяет встроить синтаксис HTML в код.
------------------------------------------------------------------------------
2) Библиотека Redux — шаблон для JavaScript предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст. Создатели: Дэн Абрамов и Эндрю Кларк.
------------------------------------------------------------------------------
3) React-router - это набор навигационных компонентов, декларативно составляющих приложение. Если вы хотите иметь заметные URL-адреса для своего веб-приложения или составной способ навигации в React Native, React Router работает везде, где React рендеринг.
------------------------------------------------------------------------------
4) Node.js — это среда выполнения JavaScript, которая запускает ваше внутреннее приложение. Node.js основан на движке Google V8 JavaScript, который используется в браузерах Chrome. Он также включает в себя ряд модулей, которые предоставляют функции, необходимые для реализации веб-приложений, включая сетевые протоколы, такие как HTTP. Сторонние модули, которые могут быть установлены с помощью npm инструмента. Node.js - это асинхронный механизм, управляемый событиями, в котором приложение выполняет запрос, а затем продолжает работать над другими полезными задачами, а не останавливается, ожидая ответа. По завершении запрошенного задания приложение информируется о результатах посредством обратного вызова. Это позволяет параллельно выполнять большое количество операций, что важно при масштабировании приложений.
------------------------------------------------------------------------------
5) Firebase - это облачная база данных, которая позволяет пользователям хранить и получать сохраненную информацию, а также имеет удобные средства и методы взаимодействия с ней. Firebase хранит текстовые данные в JSON формате и предоставляет удобные методы для чтения, обновления и извлечения данных. Также, Firebase может помочь с регистрацией и авторизацией пользователей, хранением сессий (авторизованные пользователи), медиафайлов к которым с легкостью предоставляет доступ благодаря Cloud Storage.
------------------------------------------------------------------------------
5) Axios - это HTTP-клиент, основанный на Promise для node.js и браузера. Он изоморфный* он может работать в браузере и node.js с той же базой кодов. На стороне сервера он использует нативный node.js http-модуль, тогда как на стороне клиента (браузер) он использует XMLHttpRequests.
------------------------------------------------------------------------------
*В веб-разработке изоморфное приложение — это приложение, код которого (в данном случае JavaScript) может выполняться как на сервере, так и на клиенте. 
==============================================================================

АРХИТЕКТУРА ВЕБ-ПРИЛОЖЕНИЯ
Архитектура веб-приложений - это структура, состоящая из связей и взаимодействий между компонентами приложений, такими как пользовательский интерфейс, сервер и базы данных. Общая концепция архитектуры веб-приложений соответствует концепции пользователя браузера, который запускает приложение, которое может работать на нескольких веб-сайтах.
Архитектуры веб-приложений состоят из нескольких компонентов, которые помогают создавать его цифровую структуру. 
Эти компоненты можно разделить на две области: компоненты приложения пользовательского интерфейса и структурные компоненты. 
Компоненты приложения пользовательского интерфейса относятся к веб-страницам. 
Структурные компоненты, являющиеся настоящим ядром процесса разработки приложений:
– Веб-браузер или клиент.
– Сервер веб-приложений.
– Сервер базы данных. 
1) Веб-браузер или клиент - это представление интерфейса функциональности веб-приложения, с которой взаимодействует пользователь. Этот контент, предоставляемый клиенту, может быть разработан с использованием HTML, JavaScript и CSS и не требует адаптации, связанной с операционной системой. По сути, веб-браузер или клиент управляет взаимодействием конечных пользователей с приложением.
2) Сервер веб-приложений управляет бизнес-логикой и постоянством данных и может быть построен с использованием Node.js и других языков. (API)*
3) Сервер базы данных предоставляет и хранит соответствующие данные для приложения. Кроме того, он также может предоставлять бизнес-логику и другую информацию, которой управляет сервер веб-приложений. Основной целью архитектуры веб-сервера является выполнение запросов
клиентов на веб-сайт. 
!Архитектура веб-приложений Node.js обеспечивает скорость и эффективность среды разработки также  обеспечивает согласованность, совместное использование и повторное использование кода, простую передачу знаний и большое количество бесплатных инструментов.
Эти преимущества обеспечивают гибкость и эффективность при создании надежного веб-приложения.

* API — описание способов взаимодействия одной компьютерной программы с другими. Он упрощает процесс программирования при создании приложений, абстрагируя базовую реализацию и предоставляя только объекты или действия, необходимые разработчику. 
Проще говоря, это набор компонентов, с помощью которых компьютерная программа (программа или же сайт) может использовать другую программу.
** Web API - используется в веб-разработке - содержит, как правило, определённый набор HTTP-запросов, а также определение структуры HTTP-ответов, для выражения которых чаще всего используют XML− или JSON−формат, а так же  некоторые другие форматы.
***Разница веб сервера и сервера приложений
Сервер приложений хранит бизнес-логику для поиска цены. Веб-сервер делегирует ему генерацию ответа, скрипт вызывает сервис поиска в сервере приложений, и затем формулирует ответ HTML.
==============================================================================

ФУНКЦИОНАЛЬНОСТЬ ТЕХНОЛОГИЙ РАБОТЫ ВЕБ-ПРИЛОЖЕНИЙ ОБЩЕЕ
1) Чем веб-приложения отличаются от сайтов.
- Сайт можно представить как нечто информационное и статичное и небольших масштабов: визитка компании, сайт рецептов, городской портал или вики. Набор подготовленных заранее HTML-файлов, которые лежат на удаленном сервере и отдаются браузеру по запросу.
Сайты содержат различную статику, которая как и HTML-файл не генерируется на лету. Чаще всего это картинки, CSS-файлы, JS-скрипты, но могут быть и любые другие файлы: mp3, mov, csv, pdf.
- Веб-приложение — это что-то технически более сложное. Тут HTML-страницы генерируются на лету в зависимости от запроса пользователя. Почтовые клиенты, соц сети, поисковики, интернет-магазины, онлайн-программы для бизнеса, это все веб-приложения.
------------------------------------------------------------------------------
2) Какие бывают веб-приложения.
- Backend (бэкенд или серверная часть приложения) работает на удаленном компьютере, который может находиться где угодно. Она может быть написана на разных языках программирования: PHP, Python, Ruby, C# и других. Если создавать приложение используя только серверную часть, то в результате любых переходов между разделами, отправок форм, обновления данных, сервером будет генерироваться новый HTML-файл и страница в браузере будет перезагружаться.
-Frontend (фронтенд или клиентская часть приложения) выполняется в браузере пользователя. Эта часть написана на языке программирования Javascript. Приложение может состоять только из клиентской части, если не требуется хранить данные пользователя дольше одной сессии. Это могут простые редакторы и простые игры типа три в ряд.
-Single page application (SPA или одностраничное приложение). Более интересный вариант, когда используются и бэкенд и фронтенд. С помощью их взаимодействия можно создать приложение, которое будет работать совсем без перезагрузок страницы в браузере. Или в упрощенном варианте, когда переходы между разделами вызывают перезагрузки, но любые действия в разделе обходятся без них.
------------------------------------------------------------------------------
3) Javascript-фреймворки.
Клиентская часть приложения — это скрипты, написанные на языке программирования Javascript (JS) и исполняемые в браузере пользователя.
Сериализация — это преобразование списка или словаря в JSON-строку. 

Для примера:
Словарь:
{
  'id': 1, 
  'email': 'mail@gmail.com'
}
Сериализованная строка:
'{"id": 1, "email": "mail@gmail.com"}'

Десериализация — это обратное преобразование строки в список или словарь.
С помощью манипуляций с DOM можно полностью управлять содержимым страниц. С помощью AJAX можно обмениваться данными между клиентом и сервером. С этими технологиями уже можно создать SPA. Но при создании сложного приложения код фронтенда, основанного на JQuery, быстро становится запутанным и трудно поддерживаемым.
К счастью, на смену JQuery пришли Javascript-фреймворки: Backbone Marionette, Angular, React, Vue и другие. У них разная философия и синтаксис, но все они позволяют с гораздо большим удобством управлять данными на фронтенде, имеют шаблонизаторы и инструменты для создания навигации между страницами.
HTML-шаблон — это «умная» HTML-страница, в которой вместо конкретных значений используются переменные и доступны различные операторы: if, цикл for и другие. Процесс получения HTML-страницы из шаблона, когда подставляются переменные и применяются операторы, называется рендерингом шаблона. 
Полученная в результате рендеринга страница показывается пользователю. Переход в другой раздел в SPA это применение другого шаблона. Если необходимо использовать в шаблоне другие данные, то они запрашиваются у сервера. Все отправки форм с данными это AJAX запросы на сервер.
------------------------------------------------------------------------------
4) Как клиент и сервер общаются между собой.
Общение клиента с сервером происходит по протоколу HTTP. Основа этого протокола — это запрос от клиента к серверу и ответ сервера клиенту. 
Для запросов обычно используют методы GET, если мы хотим получить данные, и POST, если мы хотим изменить данные. Еще в запросе указывается Host (домен сайта), тело запроса (если это POST-запрос) и много дополнительной технической информации.
Современные веб-приложения используют протокол HTTPS, расширенную версию HTTP с поддержкой шифрования SSL/TLS.
Есть еще один запрос, который делается перед HTTP. Это DNS (domain name system) запрос. Он нужен для получения ip-адреса, к которому привязан запрашиваемый домен. Эта информация сохраняется в браузере и мы больше не тратим на это время.
После того как сервер обработал запрос, он возвращает ответ c HTML-страницей или данными, и код ответа. Если все хорошо, то код ответа — 200; если страница не найдена, то — 404; если произошла ошибка и сервер не смог обработать запрос, то — 500. Это самые часто встречающиеся коды.
------------------------------------------------------------------------------
5) Кэширование в веб-приложениях.
Еще одна технология, с которой мы постоянно сталкиваемся, которая присутствует как веб-приложениях и программном обеспечении, так и на уровне процессора в наших компьютерах и смартфонах.
Cache - это концепция в разработке, когда часто используемые данные, вместо того чтобы их каждый раз доставать из БД, вычислять или подготавливать иным способом, сохраняются в быстро доступном месте. Несколько примеров использования кэша:
- Firebase пришел запрос на получение данных. Мы достаем из БД данные, подготавливаем их и кладем в БД с быстрым доступом. При следующем запросе мы сразу достанем их и отправим на фронтенд. Если мы узнаем, что данные перестали быть актуальными, мы их инвалидируем (удаляем из кэша)
-Для кэширования статических файлов используются CDN (content delivery network) провайдеры. Это серверы, расположенные по всему миру и оптимизированные для раздачи статики. Иногда бывает эффективнее положить картинки, видео, JS-скрипты на CDN вместо своего сервера.
-Во всех браузерах по умолчанию включено кэширование статических файлов. Благодаря этому, открывая сайт не в первый раз, все загружается заметно быстрее. Минус для разработчика в том, что со включенным кэшем не всегда сразу видны изменения сделанные в коде.
==============================================================================

===| ВЕБ-ПРИЛОЖЕНИЯ ДИПЛОМНОЙ РАБОТЫ |===
СТРУКТУРА И ФУНКЦИОНАЛЬНОСТЬ 
__ Структура ->
В открытой браузере страницы основная структура приложения следующая:
1) Верху в шапке находится панель навигации (панель инструментов)
= Панель навигации имеет следующие ссылки для связи с другими страницами:
- Shop
- Special
- Location
- Logo
- About
- Contacts
- Иконка аутентификации (вход/выход пользователя)
- Иконка корзины товаров  со счетчиком количества
= Панель навигации имеет адаптив появляется Logo и иконка (бургер)
- Иконка аутентификации  |  - Иконка корзины
- Shop
- Special
- Location
- About
- Contacts
------------------------------------------------------------------------------
2) В средней части в теле находится:
- Заголовок страница которого отображает: картинку, название заголовка, текст. -> (опционально)
- Дополнение к странице в виде текста или картинок или кнопок и тд. -> (опционально)
3) В нижней части в подвале находится (footer (нижний колонтитул)):
- Ссылка связи с главной страницей (и текст лозунг реклама)
- Подписка на рассылку новостей от магазина (Email - от пользователя) 
- Ссылки связи со страницами -> (About | Products | Location | Contacts)
- Ссылки иконки перехода на социальные сети -> (Instagram | Twitter | Linkedin | Facebook)
------------------------------------------------------------------------------
------------------------------------------------------------------------------
__ Функциональность (принцип работы) ->
При открытии сайта в браузере отображается главная страница.
=== Панель навигации отображается на всех страницах пользователя.
С помощью которой он может выбрать для себя интересующую ссылку в поле навигации и по нажатию на которую будет осуществлен переход на страницу.
Если по какойто причине не будет выполнен переход на нужную страницу то пользователь будет перенаправлен на страницу где будет отображено что такой странице не существует при этом панель навигации сохраняется с возможностью попробовать другие ссылки для перехода.
=== -> 
далее при описании страниц навигация опускается. (также опускается функциональность подвала)
------------------------------------------------------------------------------
- Главная страница Home - возможность перехода при нажатии на кнопку ([Discover Now] -> page-Shop) -> Визитка компании с картинками -> Слоган и короткое описание под ним -> представлены каталоги в виде картинок по категориям и их названиями при клике происходит переход в нажатую категорию.
------------------------------------------------------------------------------
- Категории (вложенность категория) - описание категории с картинкой -> товар в картинках с указанием цены и описанием если кликнуть на картинку будет выполнен переход (shop/idproduct) на страницу для добавления товара в корзину.
------------------------------------------------------------------------------
- Страница добавления товара (shop/idproduct) где представлено картинка товара краткое описание и более детальное описание.
Так же присутствуют кнопки выбора размера при нажатии на выбранный размер отображается надпись выбора размера и появляется кнопка добавления в корзину товара.
При нажатии на кнопку добавления товара в корзину отображается надпись что товар добавлен в корзину и сколько добавлено товара.
Также отображается в панели навигации на иконке корзина количество товара.
------------------------------------------------------------------------------
- Корзина (cart) {
показаны товары (в ряд или колонкой зависит от размера окна) с картинками и коротким названием при клики на них может быть обратный переход в (shop/idproduct).
Есть счетчик с количеством товара и кнопки + и -при нажатии на которые можно изменять количество товара если дойдет до нуля то товар автоматически удалится.
Есть цена и кнопка удалить при удалении товар полностью удаляется на зависимо от количества.},
{ Сбоку или в самом конце в зависимости от размера окна имеется ИТОГОВАЯ суммы товаров и кнопка [Checkout] для перехода и подтверждения покупки товаров под ней располагается кнопка истории в виде иконки при нажатии на которые будет осуществлен переход в ту или иную страницу при условии что пользователь авторизован};
Если корзина пуста ноль товаров появится кнопка [Continue shopping] при нажатии на которую будет осуществлен переход на страницу Shop.
------------------------------------------------------------------------------
- Checkout страница контроля-проверки при нажатии из корзины отображается товар заказа пользователя: с кратким описанием товара, количеством, ценой, и итоговой ценой всех товаров.
Имеется форма заполнения ФИО и телефона и кнопка [Complete the order] при нажатии на которую -> корзина обнуляется весь товар уходит на firebase со всеми данными.
------------------------------------------------------------------------------
- History страница при нажатии из корзины -> происходит запрос на firebase -> выполняется переход на на страницу history-> приходят все заказы ранее совершенные пользователем отображается картинка Id заказов при нажатии на картинку осуществляется переход (shop/idproduct)
------------------------------------------------------------------------------
- Аутентификация (in/out) - если не авторизован то совершить покупку нельзя, также при нажатии в навигации на иконку авторизации будет выполнен переход с формой регистрации.
Там где две кнопки [Sign in] и [Sign up]
при нажатии [Sign in] будет выполнен запрос в базу firebase и провен пользователь для осуществление входа.
при нажатии [Sign up] будет выполнен запрос в базу firebase и записан зарегистрирован пользователь для входа.
Если при регистрации такая почта имеется будет отображатся что такая почта существует.
Присутствует валидация.
------------------------------------------------------------------------------
- Shop страница отображается картинка заголовок и текст -> Categories картинки для перехода по категориям ->  All Products все товары в магазине с ценами при нажатии переход на страницу покупки.
------------------------------------------------------------------------------
- Special страница отображается картинка заголовок и текст -> текст -> элементы спешала -> заголовок с описанием - текст.
------------------------------------------------------------------------------
- Location страница отображается картинка заголовок и текст -> адрес карта -> часы работы -> кнопка [Order now] при нажатии переход в на страницу shop раздел categories
------------------------------------------------------------------------------
- About страница отображается картинка заголовок и текст -> заголовок, картинки, текст -> заголовок, картинки, текст
------------------------------------------------------------------------------
- Contact страница отображается картинка заголовок и текст.
------------------------------------------------------------------------------
- Logo - по нажатию в навигации происходит переход на главную страницу.
==============================================================================

ЗАКЛЮЧЕНИЕ
Разработка дипломного проекта  веб-приложение интернет магазин заказа товаров была выполнена. Проект был разработан и является трудоемким.  Цель этого проекта была направлена на разработку веб-приложения для заказов одежды из интернет - магазина. 
Этот проект помог мне в получении ценной информации и практического знания по нескольким такие темы, как разработка веб-страниц с помощью React, управление базой данных с использованием Firebase. 
Существует ряд нововведении для дальнейшего развития этого проекта. Ряд функций может быть добавлен к этой системе в будущем, для полного обеспечения интернет – магазина.
==============================================================================
Front: React, Redux, Redux-thunk, axios. Back: Nodejs, Firebase. 
==============================================================================
